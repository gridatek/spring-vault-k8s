name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: ['17', '21']
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-jdk${{ matrix.java-version }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-jdk${{ matrix.java-version }}-
          ${{ runner.os }}-m2-

    - name: Run unit tests
      run: ./mvnw clean test -Dmaven.test.failure.ignore=false

    - name: Run integration tests
      run: ./mvnw clean verify -P integration-tests -Dmaven.test.failure.ignore=false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-jdk${{ matrix.java-version }}
        path: |
          target/surefire-reports/
          target/failsafe-reports/
        retention-days: 30

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run code quality checks
      run: |
        echo "Running Maven checkstyle and spotbugs..."
        ./mvnw clean compile checkstyle:check spotbugs:check || echo "Code quality checks completed with warnings"

    - name: Check for TODO/FIXME comments
      run: |
        echo "Checking for TODO/FIXME comments..."
        if grep -r "TODO\|FIXME" src/ --exclude-dir=target; then
          echo "⚠️ Found TODO/FIXME comments - consider addressing them"
        else
          echo "✅ No TODO/FIXME comments found"
        fi

  build-and-push:
    needs: [test, code-quality]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build application
      run: ./mvnw clean package -DskipTests

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Output image details
      run: |
        echo "Built tags: ${{ steps.meta.outputs.tags }}"
        echo "Image digest: ${{ steps.build.outputs.digest }}"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Kind cluster
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: vault-app-cluster

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get image tag from build job
      run: |
        echo "Available environment variables:"
        echo "GITHUB_SHA: ${{ github.sha }}"
        echo "GITHUB_REF: ${{ github.ref }}"
        echo "Repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        
        # Use the same tag format as the build job
        IMAGE_TAG="sha-$(echo ${{ github.sha }} | cut -c1-7)"
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
        echo "Using image tag: ${IMAGE_TAG}"

    - name: Pull and load Docker image to Kind
      run: |
        echo "Pulling image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
        
        # Check if image exists first
        if ! docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}; then
          echo "❌ Image not found in registry, checking available tags..."
          echo "Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "Expected tag: ${IMAGE_TAG}"
          echo "Trying to list available images..."
          docker search ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} || echo "Cannot search registry"
          exit 1
        fi
        
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} || {
          echo "❌ Failed to pull image"
          docker images | grep vault-app || echo "No local vault-app images"
          exit 1
        }
        
        echo "Loading image into Kind cluster..."
        kind load docker-image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} --name vault-app-cluster || {
          echo "❌ Failed to load image into Kind"
          kind get clusters
          docker exec vault-app-cluster-control-plane crictl images || echo "Cannot list images in cluster"
          exit 1
        }
        
        # Verify cluster and image
        echo "✅ Verifying cluster connectivity..."
        kubectl cluster-info
        kubectl get nodes
        
        echo "✅ Verifying image is loaded..."
        docker exec vault-app-cluster-control-plane crictl images | grep vault-app || {
          echo "Image not found in cluster, checking all images..."
          docker exec vault-app-cluster-control-plane crictl images
        }


    - name: Deploy to Kubernetes
      run: |
        set -e  # Exit on any error
        
        echo "=== Validating cluster connectivity ==="
        kubectl cluster-info
        kubectl get nodes
        
        echo "=== Validating manifest files ==="
        ls -la k8s/
        for file in k8s/*.yaml; do
          echo "Checking $file..."
          kubectl apply --dry-run=client -f "$file" || echo "Warning: $file has validation issues"
        done
        
        echo "=== Creating namespace ==="
        kubectl apply -f k8s/namespace.yaml
        kubectl wait --for=condition=Ready namespace/vault-app --timeout=60s
        
        echo "=== Applying RBAC resources ==="
        kubectl apply -f k8s/vault-rbac.yaml || {
          echo "Failed to apply RBAC resources, checking details..."
          kubectl get clusterrolebindings | grep vault || echo "No vault clusterrolebindings found"
          exit 1
        }
        
        echo "=== Creating secrets ==="
        kubectl apply -f k8s/vault-certs-secret.yaml || {
          echo "Failed to apply secrets, checking namespace..."
          kubectl get namespace vault-app || echo "Namespace not found"
          exit 1
        }
        
        echo "=== Creating storage resources ==="
        kubectl apply -f k8s/postgres-pvc.yaml || {
          echo "Failed to apply PVC, checking storage classes..."
          kubectl get storageclass || echo "No storage classes available"
          exit 1
        }
        
        echo "=== Creating services ==="
        kubectl apply -f k8s/postgres-service.yaml
        kubectl apply -f k8s/app-service.yaml
        
        echo "=== Deploying PostgreSQL ==="
        kubectl apply -f k8s/postgres-deployment.yaml || {
          echo "Failed to apply PostgreSQL deployment"
          kubectl describe deployment postgres -n vault-app || echo "No postgres deployment found"
          exit 1
        }
        kubectl wait --for=condition=available deployment/postgres -n vault-app --timeout=300s || {
          echo "PostgreSQL deployment not ready, checking status..."
          kubectl get pods -l app=postgres -n vault-app
          kubectl describe pods -l app=postgres -n vault-app
          exit 1
        }
        
        echo "=== Deploying Vault ==="
        kubectl apply -f k8s/vault-deployment.yaml || {
          echo "Failed to apply Vault deployment"
          kubectl describe deployment vault -n vault-app || echo "No vault deployment found"
          exit 1
        }
        kubectl wait --for=condition=available deployment/vault -n vault-app --timeout=300s || {
          echo "Vault deployment not ready, checking status..."
          kubectl get pods -l app=vault -n vault-app
          kubectl describe pods -l app=vault -n vault-app
          exit 1
        }
        
        # Wait for Vault to be ready and initialize
        echo "Waiting for Vault to be ready..."
        sleep 30
        
        echo "=== Deploying application ==="
        # First apply the base deployment
        kubectl apply -f k8s/app-deployment.yaml
        
        # Then update the image and pull policy
        kubectl set image deployment/vault-app vault-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} -n vault-app
        kubectl patch deployment vault-app -n vault-app -p '{"spec":{"template":{"spec":{"containers":[{"name":"vault-app","imagePullPolicy":"Never"}]}}}}'
        
        echo "=== Waiting for application deployment ==="
        kubectl rollout status deployment/vault-app -n vault-app --timeout=600s

    - name: Verify deployment and run diagnostics
      if: always()
      run: |
        echo "=== Deployment Status ==="
        kubectl get deployments -n vault-app
        kubectl get pods -n vault-app -o wide
        kubectl get services -n vault-app
        
        echo "=== Application Pod Details ==="
        kubectl describe pods -l app=vault-app -n vault-app
        
        echo "=== Application Logs ==="
        kubectl logs -l app=vault-app -n vault-app --tail=50 --previous=false || echo "No current logs"
        
        echo "=== Vault Pod Status ==="
        kubectl describe pods -l app=vault -n vault-app
        kubectl logs -l app=vault -n vault-app --tail=30 || echo "No Vault logs"
        
        echo "=== Namespace Events ==="
        kubectl get events -n vault-app --sort-by='.lastTimestamp' --field-selector type!=Normal
        
        echo "=== Cluster Resource Usage ==="
        kubectl top nodes || echo "Metrics not available"
        kubectl top pods -n vault-app || echo "Pod metrics not available"

    - name: Run end-to-end tests
      run: |
        echo "=== Starting E2E Tests ==="
        
        # Check if app is actually ready before testing
        kubectl wait --for=condition=available deployment/vault-app -n vault-app --timeout=300s
        
        # Get pod status before testing
        kubectl get pods -l app=vault-app -n vault-app
        
        # Start port forwarding in background
        kubectl port-forward service/vault-app 8080:8080 -n vault-app &
        PORT_FORWARD_PID=$!
        
        # Wait for port forward to establish
        echo "Waiting for port forwarding to establish..."
        sleep 10
        
        # Test connection with retries
        for i in {1..10}; do
          echo "Attempt $i: Testing health endpoint..."
          if curl -f --max-time 10 http://localhost:8080/api/health; then
            echo "Health check passed!"
            break
          elif [ $i -eq 10 ]; then
            echo "Health check failed after 10 attempts"
            # Show final diagnostics
            kubectl get pods -n vault-app
            kubectl logs -l app=vault-app -n vault-app --tail=20
            kill $PORT_FORWARD_PID || true
            exit 1
          else
            echo "Attempt $i failed, retrying in 5 seconds..."
            sleep 5
          fi
        done
        
        # Test additional endpoints if health passes
        echo "Testing additional endpoints..."
        curl -f --max-time 10 http://localhost:8080/api/users || echo "Users endpoint not available"
        
        # Clean up port forward
        kill $PORT_FORWARD_PID || true
        echo "E2E tests completed successfully!"

  security-scan:
    needs: [test, code-quality]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Dependency vulnerability scan
      run: |
        echo "Running OWASP dependency check..."
        ./mvnw org.owasp:dependency-check-maven:check -DskipTests || echo "Vulnerability scan completed with warnings"
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: target/dependency-check-report.html
        retention-days: 30

  notify-status:
    needs: [test, code-quality, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment completed successfully"
        else
          echo "❌ Deployment failed - check logs above"
          exit 1
        fi