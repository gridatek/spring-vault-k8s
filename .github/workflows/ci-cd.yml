name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run unit tests
      run: ./mvnw clean test

    - name: Run integration tests
      run: ./mvnw clean verify -P integration-tests

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build application
      run: ./mvnw clean package -DskipTests

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Output image details
      run: |
        echo "Built tags: ${{ steps.meta.outputs.tags }}"
        echo "Image digest: ${{ steps.build.outputs.digest }}"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Kind cluster
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: vault-app-cluster

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Check available image tags
      run: |
        echo "Checking if image exists with different tag formats..."
        echo "Trying raw SHA: ${{ github.sha }}"
        if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} >/dev/null 2>&1; then
          echo "Image found with raw SHA tag"
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
        else
          echo "Trying sha- prefixed format: sha-${{ github.sha }}"
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }} >/dev/null 2>&1; then
            echo "Image found with sha- prefixed tag"
            echo "IMAGE_TAG=sha-${{ github.sha }}" >> $GITHUB_ENV
          else
            echo "Trying shortened SHA format..."
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${SHORT_SHA} >/dev/null 2>&1; then
              echo "Image found with short SHA tag: sha-${SHORT_SHA}"
              echo "IMAGE_TAG=sha-${SHORT_SHA}" >> $GITHUB_ENV
            else
              echo "No image found with any SHA format, listing repository info..."
              docker search ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} || echo "Cannot search repository"
              exit 1
            fi
          fi
        fi

    - name: Load Docker image to Kind
      run: |
        echo "Pulling image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
        echo "Loading image into Kind cluster..."
        kind load docker-image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} --name vault-app-cluster
        echo "Verifying image is loaded in Kind..."
        docker exec vault-app-cluster-control-plane crictl images | grep spring-vault-k8s || echo "Image not found in Kind"
        echo "Image loading completed"

    - name: Deploy to Kubernetes
      run: |
        # Apply namespace first and give it a moment to be ready
        echo "Creating namespace..."
        kubectl apply -f k8s/namespace.yaml
        
        # Check namespace status
        echo "Checking namespace status..."
        kubectl get namespace vault-app -o yaml || echo "Namespace not found yet"
        
        # Simple sleep instead of complex wait
        echo "Waiting for namespace to be ready..."
        sleep 10
        
        # Verify namespace is available
        kubectl get namespace vault-app
        echo "Namespace ready, proceeding with resources..."
        
        # Apply RBAC and other cluster-level resources
        echo "Applying RBAC and cluster resources..."
        kubectl apply -f k8s/vault-rbac.yaml
        
        # Apply storage resources
        echo "Applying storage resources..."
        kubectl apply -f k8s/postgres-pvc.yaml
        
        # Apply services (they can be created before deployments)
        echo "Applying services..."
        kubectl apply -f k8s/postgres-service.yaml
        kubectl apply -f k8s/app-service.yaml
        
        # Apply deployments
        echo "Applying deployments..."
        kubectl apply -f k8s/postgres-deployment.yaml
        kubectl apply -f k8s/vault-deployment.yaml
        kubectl apply -f k8s/app-deployment.yaml
        
        # Update the app deployment with the correct image and pull policy
        echo "Updating app deployment with image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
        kubectl set image deployment/vault-app vault-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} -n vault-app
        
        # Set imagePullPolicy to Never since we loaded the image into Kind
        kubectl patch deployment vault-app -n vault-app -p '{"spec":{"template":{"spec":{"containers":[{"name":"vault-app","imagePullPolicy":"Never"}]}}}}'
        
        # Fix the Vault deployment and delete old pods to force restart
        kubectl patch deployment vault -n vault-app -p '{"spec":{"template":{"spec":{"containers":[{"name":"vault","imagePullPolicy":"IfNotPresent"}]}}}}'
        kubectl delete pods -l app=vault -n vault-app || echo "No vault pods to delete"
        
        # Clean up old replica sets and pods for vault-app
        echo "Cleaning up old replica sets..."
        kubectl delete replicaset -l app=vault-app -n vault-app || echo "No old replica sets to delete"
        kubectl delete pods -l app=vault-app -n vault-app || echo "No vault-app pods to delete"
        
        # Wait for the deployment to stabilize
        sleep 10
        
        # Wait for deployment to be ready
        echo "Waiting for deployment to be ready..."
        kubectl rollout status deployment/vault-app -n vault-app --timeout=300s || {
          echo "Deployment rollout timed out, checking pod status..."
          kubectl get pods -n vault-app
          echo "Describing vault-app pods..."
          kubectl describe pods -l app=vault-app -n vault-app
          echo "Checking vault-app pod logs..."
          kubectl logs -l app=vault-app -n vault-app --tail=100 --previous=false || echo "No current logs available"
          echo "Checking previous container logs if crashed..."
          kubectl logs -l app=vault-app -n vault-app --tail=100 --previous=true || echo "No previous logs available"
          echo "Checking Vault pod status..."
          kubectl get pods -l app=vault -n vault-app
          kubectl logs -l app=vault -n vault-app --tail=20 || echo "No Vault logs available"
          echo "Checking events in namespace..."
          kubectl get events -n vault-app --sort-by='.lastTimestamp'
          exit 1
        }

    - name: Run end-to-end tests
      run: |
        kubectl port-forward service/vault-app 8080:8080 -n vault-app &
        sleep 30
        curl -f http://localhost:8080/api/health